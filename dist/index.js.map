{"version":3,"sources":["../src/index.js"],"names":["module","exports","HealthCheck","constructor","options","defaultOptions","runAllHealthCheck","checkObjects","Promise","all","checks","map","checkOptions","log","Object","prototype","hasOwnProperty","call","checkTypeMap","type","TypeError","CheckTypeClass","healthCheck","start","status","ok","toJSON","filter","check","severity","every","resolve","stop","forEach","isRunning","inspect","unshift","name","push","join","console","http","require","Check","Base"],"mappings":"AAAA;;;;AAIA;;AAEA;;AACA;;;;AAEA;;;AAGAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,WAAN,CAAkB;AACjC;;;;;;;AAOAC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAe,4BAAc,EAAd,EAAkBA,OAAlB,EAA2BF,WAAW,CAACG,cAAvC,CAAf;AACD;;AAED,QAAMC,iBAAN,GAA0B;AACxB,SAAKC,YAAL,GAAoB,MAAMC,OAAO,CAACC,GAAR,CACxB,KAAKL,OAAL,CAAaM,MAAb,CAAoBC,GAApB,CAAwB,MAAOC,YAAP,IAAwB;AAC9CA,MAAAA,YAAY,CAACC,GAAb,GAAmB,KAAKT,OAAL,CAAaS,GAAhC;;AAEA,UAAI,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCf,WAAW,CAACgB,YAAjD,EAA+DN,YAAY,CAACO,IAA5E,CAAL,EAAwF;AACtF,cAAM,IAAIC,SAAJ,CAAe,uBAAsBR,YAAY,CAACO,IAAK,EAAvD,CAAN;AACD;;AAED,YAAME,cAAc,GAAGnB,WAAW,CAACgB,YAAZ,CAAyBN,YAAY,CAACO,IAAtC,CAAvB;AACA,YAAMG,WAAW,GAAG,IAAID,cAAJ,CAAmBT,YAAnB,CAApB;AACA,YAAMU,WAAW,CAACC,KAAZ,EAAN;AACA,aAAOD,WAAP;AACD,KAXD,CADwB,CAA1B;AAeA,SAAKT,GAAL,GAAW,KAAKT,OAAL,CAAaS,GAAxB;AACD;AAED;;;;;;AAIA,QAAMW,MAAN,GAAe;AACb,UAAM,KAAKlB,iBAAL,EAAN;AACA,UAAMmB,EAAE,GAAG,KAAKC,MAAL,GACT;AADS,KAERC,MAFQ,CAEAC,KAAD,IAAWA,KAAK,CAACC,QAAN,KAAmB,CAF7B,EAGRC,KAHQ,CAGDF,KAAD,IAAWA,KAAK,CAACH,EAHf,CAAX;AAIA,WAAOjB,OAAO,CAACuB,OAAR,CAAgBN,EAAhB,CAAP;AACD;AAED;;;;;;AAIAO,EAAAA,IAAI,GAAG;AACL,SAAKzB,YAAL,CAAkB0B,OAAlB,CAA2BL,KAAD,IAAW;AACnC,UAAIA,KAAK,CAACM,SAAN,EAAJ,EAAuB;AACrBN,QAAAA,KAAK,CAACI,IAAN;AACD;AACF,KAJD;AAKD;AAED;;;;;;;AAKAN,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKnB,YAAL,CAAkBI,GAAlB,CAAuBiB,KAAD,IAAWA,KAAK,CAACF,MAAN,EAAjC,CAAP;AACD;AAED;;;;;;;AAKAS,EAAAA,OAAO,GAAG;AACR,UAAMA,OAAO,GAAG,KAAK5B,YAAL,CAAkBI,GAAlB,CAAuBiB,KAAD,IAAY,KAAIA,KAAK,CAACO,OAAN,EAAgB,EAAtD,CAAhB;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAiB,GAAE,KAAKjC,WAAL,CAAiBkC,IAAK,IAAzC;AACAF,IAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACA,WAAOH,OAAO,CAACI,IAAR,CAAa,IAAb,CAAP;AACD;;AA3EgC,CAAnC;AA8EA;;;;;AAIAvC,MAAM,CAACC,OAAP,CAAeI,cAAf,GAAgC;AAC9BK,EAAAA,MAAM,EAAE,EADsB;AAE9BG,EAAAA,GAAG,EAAE2B;AAFyB,CAAhC;AAKA;;;;;AAIAxC,MAAM,CAACC,OAAP,CAAeiB,YAAf,GAA8B;AAC5B,MAAIuB,IAAJ,GAAW;AACT,WAAOC,OAAO,CAAC,cAAD,CAAd;AACD;;AAH2B,CAA9B;AAMA;;;;;AAIA1C,MAAM,CAACC,OAAP,CAAe0C,KAAf,GAAuBC,aAAvB","sourcesContent":["/**\n * Module to build health check functions which comply with the FT health check standard.\n * @module @altruist/health-check\n */\n'use strict';\n\nimport Base from './check/base';\nimport mergeDeepLeft from 'ramda/src/mergeDeepLeft';\n\n/**\n * Class representing a set of health checks.\n */\nmodule.exports = class HealthCheck {\n  /**\n   * Create a health check set.\n   * @param {Object} options - The health check set options.\n   * @param {Array} options.checks - An array of health check configurations.\n   * @param {Object} [options.log=console] - A logging object.\n   * @throws {TypeError} Will throw if any options are invalid.\n   */\n  constructor(options) {\n    this.options = mergeDeepLeft({}, options, HealthCheck.defaultOptions);\n  }\n\n  async runAllHealthCheck() {\n    this.checkObjects = await Promise.all(\n      this.options.checks.map(async (checkOptions) => {\n        checkOptions.log = this.options.log;\n\n        if (!Object.prototype.hasOwnProperty.call(HealthCheck.checkTypeMap, checkOptions.type)) {\n          throw new TypeError(`Invalid check type: ${checkOptions.type}`);\n        }\n\n        const CheckTypeClass = HealthCheck.checkTypeMap[checkOptions.type];\n        const healthCheck = new CheckTypeClass(checkOptions);\n        await healthCheck.start();\n        return healthCheck;\n      }),\n    );\n\n    this.log = this.options.log;\n  }\n\n  /**\n   * Get a status\n   * @returns a promise that resolves to a boolean indicating whether all the health checks are OK.\n   */\n  async status() {\n    await this.runAllHealthCheck();\n    const ok = this.toJSON()\n      //false will be the resolved value if any of the health checks with severity 1 are failing.\n      .filter((check) => check.severity === 1)\n      .every((check) => check.ok);\n    return Promise.resolve(ok);\n  }\n\n  /**\n   * Stop all of the checks from running, calling the `stop` method of each.\n   * @returns {undefined}\n   */\n  stop() {\n    this.checkObjects.forEach((check) => {\n      if (check.isRunning()) {\n        check.stop();\n      }\n    });\n  }\n\n  /**\n   * Get a JSON representation of the health check set.\n   * @access private\n   * @returns {Object} The health check set as a JSON-friendly object.\n   */\n  toJSON() {\n    return this.checkObjects.map((check) => check.toJSON());\n  }\n\n  /**\n   * Get console-friendly representation of the health check set.\n   * @access private\n   * @returns {String} The console-friendly representation.\n   */\n  inspect() {\n    const inspect = this.checkObjects.map((check) => `  ${check.inspect()}`);\n    inspect.unshift(`${this.constructor.name} {`);\n    inspect.push('}');\n    return inspect.join('\\n');\n  }\n};\n\n/**\n * HealthCheck option defaults. This will be merged with user options.\n * @access private\n */\nmodule.exports.defaultOptions = {\n  checks: [],\n  log: console,\n};\n\n/**\n * HealthCheck type to class map.\n * @access private\n */\nmodule.exports.checkTypeMap = {\n  get http() {\n    return require('./check/http');\n  },\n};\n\n/**\n * HealthCheck Base class.\n * @access public\n */\nmodule.exports.Check = Base;\n"],"file":"index.js"}