{"version":3,"sources":["../../src/check/http.js"],"names":["Base","require","isFunction","isPlainObject","isString","superagent","module","exports","PingUrlCheck","constructor","options","assertOptionValidity","run","url","response","method","set","pragma","expires","headers","timeout","interval","retry","then","ok","checkOutput","lastUpdated","Date","log","info","name","catch","error","message","console","validateOptions","TypeError","trim","undefined","validationResult","Error"],"mappings":"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","sourcesContent":["/**\n * Module to create a health check object that pings a URL.\n */\n\n'use strict';\n\nconst Base = require('./base');\nconst isFunction = require('lodash/isFunction');\nconst isPlainObject = require('lodash/isPlainObject');\nconst isString = require('lodash/isString');\nconst superagent = require('superagent');\n\n/**\n * Class representing a single health check that pings a URL.\n */\nmodule.exports = class PingUrlCheck extends Base {\n  /**\n   * Create a ping URL health check. Accepts the same options as Base, but with a few additions.\n   * @param {Object} options - The health check options.\n   * @param {String} [options.method=HEAD] - The method to use when pinging the URL.\n   * @param {String} options.url - The URL to ping when the health check runs.\n   * @throws {TypeError} Will throw if any options are invalid.\n   */\n  constructor(options) {\n    PingUrlCheck.assertOptionValidity(options);\n    super(options);\n  }\n\n  /**\n   * Actually perform the health check. This updates the relevant properties.\n   * @returns {Promise} A promise which resolves with undefined.\n   */\n  async run() {\n    const url = typeof this.options.url === 'function' ? this.options.url() : this.options.url;\n    const response = await superagent(this.options.method || 'GET', url)\n      .set({\n        'cache-control': 'no-cache, no-store, must-revalidate',\n        pragma: 'no-cache',\n        expires: '0',\n        ...this.options.headers,\n      })\n      .timeout(this.options.interval)\n      .retry(this.options.retry || 2)\n      .then(() => {\n        this.ok = true;\n        this.options.ok = \"testing  if working\";\n\n        this.checkOutput = 'test';\n        this.lastUpdated = new Date();\n        this.log.info(`Health check \"${this.options.name}\" succeeded`);\n      })\n      .catch((error) => {\n        this.ok = false;\n        this.checkOutput = error.message;\n        this.lastUpdated = new Date();\n        this.log.error(`Health check \"${this.options.name}\" failed: ${error.message}`);\n      });\n\n    console.log('how does this look like http', this.ok);\n    return response;\n  }\n\n  /**\n   * Validate health check options against the standard.\n   * @param {Object} options - The options to check.\n   * @returns {(Boolean|TypeError)} Will return `true` if the options are valid, or a descriptive error if not.\n   */\n  static validateOptions(options) {\n    if (!isPlainObject(options)) {\n      return new TypeError('Options must be an object');\n    }\n    if (!isFunction(options.url) && (!isString(options.url) || !options.url.trim())) {\n      return new TypeError('Invalid option: url must be a non-empty string or a function');\n    }\n    if (options.headers !== undefined && !isPlainObject(options.headers)) {\n      return new TypeError('Invalid option: headers must be an object');\n    }\n    return true;\n  }\n\n  /**\n   * Assert that health check options are valid.\n   * @param {Object} options - The options to assert validity of.\n   * @throws {TypeError} Will throw if the options are invalid.\n   */\n  static assertOptionValidity(options) {\n    const validationResult = PingUrlCheck.validateOptions(options);\n    if (validationResult instanceof Error) {\n      throw validationResult;\n    }\n  }\n};\n"],"file":"http.js"}