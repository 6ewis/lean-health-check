{"version":3,"sources":["../../src/check/base.js"],"names":["Check","constructor","options","defaultOptions","assertOptionValidity","log","businessImpact","id","interval","name","panicGuide","severity","technicalSummary","checkOutput","ok","lastUpdated","Date","start","isRunning","Error","run","_interval","setInterval","bind","unref","stop","clearInterval","Boolean","status","toJSON","filter","check","every","Promise","resolve","toISOString","inspect","validateOptions","Object","TypeError","option","module","exports","requiredOptions","undefined","String","trim","test","isFinite","validationResult","console","Set"],"mappings":"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","sourcesContent":["/**\n * Module to create a health check object.\n */\n'use strict';\n\nimport is from 'ramda/src/is';\nimport mergeDeepLeft from 'ramda/src/mergeDeepLeft';\n\n/**\n * Class representing a single health check.\n */\nexport default class Check {\n  /**\n   * Create a health check. The options used here are documented in the Health check standard:\n   * @param {Object} options - The health check options.\n   * @param {String} options.businessImpact - The business impact of the health check.\n   * @param {String} options.id - The unique ID of the health check. Must use only lowercase alphanumeric characters and hyphens.\n   * @param {Number} [options.interval=30000] - The number of milliseconds to wait between checks.\n   * @param {Object} [options.log=console] - A logging object.\n   * @param {Function} [options.log.error] - A function to log error level messages.\n   * @param {String} options.name - The name of the health check.\n   * @param {String} options.panicGuide - The panic guide for the health check.\n   * @param {Number} [options.severity=1] - The severity level of the health check if it is failing. Must be one of 1 (high), 2 (medium), 3 (low).\n   * @param {String} options.technicalSummary - The technical summary for the health check.\n   * @throws {TypeError} Will throw if any options are invalid.\n   */\n  constructor(options) {\n    this.options = mergeDeepLeft({}, options, Check.defaultOptions);\n    Check.assertOptionValidity(this.options);\n    this.log = this.options.log;\n\n    // Save output options to properties\n    this.businessImpact = this.options.businessImpact;\n    this.id = this.options.id;\n    this.interval = this.options.interval;\n    this.name = this.options.name;\n    this.panicGuide = this.options.panicGuide;\n    this.severity = this.options.severity;\n    this.technicalSummary = this.options.technicalSummary;\n\n    // Set defaults\n    this.checkOutput = '';\n    this.ok = true;\n    this.lastUpdated = new Date();\n  }\n\n  /**\n   * Start running the health check.\n   * @throws {Error} Will throw if the health check is already running.\n   */\n  async start() {\n    if (this.isRunning()) {\n      throw new Error('The check has already been started');\n    }\n    await this.run();\n    if (this.options.interval) {\n      this._interval = setInterval(this.run.bind(this), this.options.interval);\n      this._interval.unref();\n    }\n  }\n\n  /**\n   * Stop running the health check.\n   * @throws {Error} Will throw if the health check is not running.\n   */\n  stop() {\n    if (!this.isRunning()) {\n      throw new Error('The check has not been started');\n    }\n\n    if (this.options.interval) {\n      clearInterval(this._interval);\n      delete this._interval;\n    }\n  }\n\n  /**\n   * Check whether the check is currently running.\n   * @returns {Boolean} Returns whether the check is running.\n   */\n  isRunning() {\n    if (!this.options.interval) {\n      return Boolean(this._interval);\n    }\n\n    throw new Error('The interval option is missing therefore nothing is currently running');\n  }\n\n  /**\n   * Actually perform the health check. This updates the relevant properties.\n   * @returns {Promise} A promise which resolves with undefined.\n   */\n  run() {\n    throw new Error('The Check class must be extended rather than used directly');\n  }\n\n  /**\n   * Get a status\n   * @returns {Function} A function which returns a promise that resolves to a boolean indicating whether all the health checks are OK.\n   */\n  status() {\n    const ok = this.toJSON()\n      //false will be the resolved value if any of the health checks with severity 1 are failing.\n      .filter((check) => check.severity === 1)\n      .every((check) => check.ok);\n    return Promise.resolve(ok);\n  }\n\n  /**\n   * Get a JSON representation of the health check.\n   * @access private\n   * @returns {Object} The health check as a JSON-friendly object.\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      ok: this.ok,\n      severity: this.severity,\n      businessImpact: this.businessImpact,\n      technicalSummary: this.technicalSummary,\n      panicGuide: this.panicGuide,\n      checkOutput: this.checkOutput,\n      lastUpdated: this.lastUpdated.toISOString(),\n    };\n  }\n\n  /**\n   * Get console-friendly representation of the health check.\n   * @access private\n   * @returns {String} The console-friendly representation.\n   */\n  inspect() {\n    return `${this.constructor.name} [${this.ok ? 'OK' : 'NOT OK'}] ${\n      this.name\n    } (updated ${this.lastUpdated.toISOString()})`;\n  }\n\n  /**\n   * Validate health check options against the standard.\n   * @param {Object} options - The options to check.\n   * @returns {(Boolean|TypeError)} Will return `true` if the options are valid, or a descriptive error if not.\n   */\n  static validateOptions(options) {\n    if (!is(Object, options)) {\n      return new TypeError('Options must be an object');\n    }\n    for (const option of module.exports.requiredOptions) {\n      if (options[option] === undefined) {\n        return new TypeError(`Missing required option: ${option}`);\n      }\n    }\n    if (!is(String, options.businessImpact) || !options.businessImpact.trim()) {\n      return new TypeError('Invalid option: businessImpact must be a non-empty string');\n    }\n    if (!is(String, options.id) || !/^[a-z0-9-]+$/.test(options.id)) {\n      return new TypeError('Invalid option: id must be lowercase and alphanumeric with hyphens');\n    }\n    if (!is(String, options.name) || !options.name.trim()) {\n      return new TypeError('Invalid option: name must be a non-empty string');\n    }\n    if (!is(String, options.panicGuide) || !options.panicGuide.trim()) {\n      return new TypeError('Invalid option: panicGuide must be a non-empty string');\n    }\n    if (!isFinite(options.severity) || options.severity < 1 || options.severity > 3) {\n      return new TypeError('Invalid option: severity must be 1, 2, or 3');\n    }\n    if (!is(String, options.technicalSummary) || !options.technicalSummary.trim()) {\n      return new TypeError('Invalid option: technicalSummary must be a non-empty string');\n    }\n    return true;\n  }\n\n  /**\n   * Assert that health check options are valid.\n   * @param {Object} options - The options to assert validity of.\n   * @throws {TypeError} Will throw if the options are invalid.\n   */\n  static assertOptionValidity(options) {\n    const validationResult = Check.validateOptions(options);\n    if (validationResult instanceof Error) {\n      throw validationResult;\n    }\n  }\n}\n\n/**\n * Check option defaults. This will be merged with user options.\n * @access private\n */\nCheck.defaultOptions = {\n  interval: 30000,\n  log: console,\n  severity: 1,\n};\n\n/**\n * A list of options that are required.\n * @access private\n */\nCheck.requiredOptions = new Set([\n  'businessImpact',\n  'id',\n  'interval',\n  'name',\n  'panicGuide',\n  'severity',\n  'technicalSummary',\n]);\n"],"file":"base.js"}